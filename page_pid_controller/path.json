#!/usr/bin/env python
import rospy
import math
import numpy as np
import matplotlib.pyplot as plt
from geometry_msgs.msg import Twist, PoseWithCovarianceStamped
from matplotlib.animation import FuncAnimation

class MiR100Controller:
    def __init__(self):
        rospy.init_node('mir100_controller')
        
        # Publisher for velocity commands
        self.cmd_vel_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
        
        # Subscriber for AMCL pose
        self.amcl_pose_sub = rospy.Subscriber('/amcl_pose', PoseWithCovarianceStamped, self.amcl_callback)
        
        # Current pose
        self.current_x = 0.0
        self.current_y = 0.0
        self.current_yaw = 0.0
        self.amcl_yaw = 0.0  # Store yaw from AMCL
        
        # Trajectory storage
        self.trajectory_x = []
        self.trajectory_y = []
        
        # Plot setup
        self.fig, self.ax = plt.subplots()
        self.line, = self.ax.plot([], [], 'b-', linewidth=2)
        self.ax.set_xlim(-20, 20)
        self.ax.set_ylim(-20, 20)
        self.ax.grid(True)
        self.ax.set_aspect('equal')
        
        # Animation
        self.ani = FuncAnimation(self.fig, self.update_plot, init_func=self.init_plot, 
                                frames=None, interval=100, blit=True, cache_frame_data=False)
        
        # Path definition
        self.path = [
            [{'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.21}, 
             {'Steering': 'STRAIGHT', 'Gear': 'FORWARD', 'distance': 6.22}, 
             {'Steering': 'RIGHT', 'Gear': 'FORWARD', 'distance': 0.0}],
            
            [{'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.12}, 
             {'Steering': 'RIGHT', 'Gear': 'BACKWARD', 'distance': 0.25}, 
             {'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.2}],
            
            [{'Steering': 'RIGHT', 'Gear': 'BACKWARD', 'distance': 0.14}, 
             {'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.31}, 
             {'Steering': 'RIGHT', 'Gear': 'BACKWARD', 'distance': 0.02}],
            
            [{'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.36}, 
             {'Steering': 'STRAIGHT', 'Gear': 'FORWARD', 'distance': 1.41}, 
             {'Steering': 'RIGHT', 'Gear': 'FORWARD', 'distance': 0.04}],
            
            [{'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.13}, 
             {'Steering': 'STRAIGHT', 'Gear': 'FORWARD', 'distance': 0.3}, 
             {'Steering': 'RIGHT', 'Gear': 'FORWARD', 'distance': 0.02}],
            
            [{'Steering': 'RIGHT', 'Gear': 'BACKWARD', 'distance': 0.19}, 
             {'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.37}, 
             {'Steering': 'RIGHT', 'Gear': 'BACKWARD', 'distance': 0.12}],
            
            [{'Steering': 'RIGHT', 'Gear': 'FORWARD', 'distance': 0.57}, 
             {'Steering': 'STRAIGHT', 'Gear': 'FORWARD', 'distance': 4.58}, 
             {'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.03}],
            
            [{'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.08}, 
             {'Steering': 'RIGHT', 'Gear': 'BACKWARD', 'distance': 0.2}, 
             {'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.26}],
            
            [{'Steering': 'RIGHT', 'Gear': 'BACKWARD', 'distance': 0.22}, 
             {'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.71}, 
             {'Steering': 'RIGHT', 'Gear': 'FORWARD', 'distance': 0.14}],
            
            [{'Steering': 'LEFT', 'Gear': 'FORWARD', 'distance': 0.49}, 
             {'Steering': 'STRAIGHT', 'Gear': 'FORWARD', 'distance': 12.27}, 
             {'Steering': 'RIGHT', 'Gear': 'FORWARD', 'distance': 0.01}],
            
            [{'Steering': 'LEFT', 'Gear': 'BACKWARD', 'distance': 0.41}, 
             {'Steering': 'RIGHT', 'Gear': 'FORWARD', 'distance': 0.71}, 
             {'Steering': 'LEFT', 'Gear': 'BACKWARD', 'distance': 0.41}]
        ]
        
        self.current_segment = 0
        self.current_action = 0
        self.distance_covered = 0.0
        self.angle_covered = 0.0
        self.R = 1.0  # Radius for arc movements
        self.max_vel = 1.0  
        self.max_ang_vel = 2.5  
        self.accel = 0.18
        self.current_vel = 0.0
        self.current_ang_vel = 0.0
        
    def amcl_callback(self, msg):
        self.current_x = msg.pose.pose.position.x
        self.current_y = msg.pose.pose.position.y
        q = msg.pose.pose.orientation
        self.amcl_yaw = math.atan2(2.0*(q.w*q.z + q.x*q.y), 1.0 - 2.0*(q.y*q.y + q.z*q.z))
        self.trajectory_x.append(self.current_x)
        self.trajectory_y.append(self.current_y)
        
    def init_plot(self):
        self.line.set_data([], [])
        return self.line,
    
    def update_plot(self, frame=0):
        self.line.set_data(self.trajectory_x, self.trajectory_y)
        return self.line,
    
    def calculate_tangent_angle(self, prev_action, current_action):
        if prev_action['Steering'] == 'STRAIGHT' and current_action['Steering'] in ['LEFT', 'RIGHT']:
            return self.current_yaw
        elif prev_action['Steering'] in ['LEFT', 'RIGHT'] and current_action['Steering'] == 'STRAIGHT':
            angle_change = prev_action['distance']
            if prev_action['Gear'] == 'BACKWARD':
                angle_change = -angle_change  # Reverse angle change for backward
            if prev_action['Steering'] == 'LEFT':
                return self.current_yaw + angle_change
            else:  # RIGHT
                return self.current_yaw - angle_change
        return self.current_yaw
    
    def trapezoidal_velocity_profile(self, distance_remaining, is_linear=True):
        if is_linear:
            max_vel = self.max_vel
            accel = self.accel
            current_vel = self.current_vel
        else:
            max_vel = self.max_ang_vel
            accel = self.accel / self.R 
            current_vel = self.current_ang_vel
        decel_distance = (max_vel**2) / (2 * accel)
        
        if distance_remaining <= decel_distance:
            new_vel = math.sqrt(2 * accel * distance_remaining)
        elif current_vel < max_vel:
            new_vel = min(max_vel, current_vel + accel * 0.1)
        else:
            new_vel = max_vel
        return new_vel
    
    def control_loop(self):
        rate = rospy.Rate(10) 
        while not rospy.is_shutdown():
            if self.current_segment < len(self.path):
                segment = self.path[self.current_segment]
                if self.current_action < len(segment):
                    action = segment[self.current_action]
                    cmd_vel = Twist()
                    if action['Steering'] == 'STRAIGHT':
                        total_distance = action['distance']
                        remaining_distance = total_distance - self.distance_covered
                        if remaining_distance > 0:
                            self.current_vel = self.trapezoidal_velocity_profile(remaining_distance, True)
                            if action['Gear'] == 'FORWARD':
                                cmd_vel.linear.x = self.current_vel
                            else:  
                                cmd_vel.linear.x = -self.current_vel
                            self.distance_covered += abs(self.current_vel) * 0.1 
                        else:
                            # Update yaw from AMCL after completing action
                            self.current_yaw = self.amcl_yaw
                            self.current_action += 1
                            self.distance_covered = 0.0
                            self.current_vel = 0.0
                            if self.current_action < len(segment):
                                next_action = segment[self.current_action]
                                if next_action['Steering'] != 'STRAIGHT':
                                    self.current_yaw = self.calculate_tangent_angle(action, next_action)
                    else:  # LEFT or RIGHT
                        total_angle = action['distance']
                        remaining_angle = total_angle - self.angle_covered
                        
                        if remaining_angle > 0:
                            self.current_ang_vel = self.trapezoidal_velocity_profile(remaining_angle, False)
                            linear_vel = self.current_ang_vel * self.R
                            if action['Gear'] == 'FORWARD':
                                cmd_vel.linear.x = linear_vel
                            else: 
                                cmd_vel.linear.x = -linear_vel
                            if action['Steering'] == 'LEFT':
                                yaw_change = self.current_ang_vel * 0.1
                                if action['Gear'] == 'BACKWARD':
                                    yaw_change = -yaw_change
                                self.current_yaw += yaw_change
                                cmd_vel.angular.z = self.current_ang_vel if action['Gear'] == 'FORWARD' else -self.current_ang_vel
                            else:  # RIGHT
                                yaw_change = -self.current_ang_vel * 0.1
                                if action['Gear'] == 'BACKWARD':
                                    yaw_change = -yaw_change
                                self.current_yaw += yaw_change
                                cmd_vel.angular.z = -self.current_ang_vel if action['Gear'] == 'FORWARD' else self.current_ang_vel
                            self.angle_covered += abs(self.current_ang_vel) * 0.1  
                        else:
                            # Update yaw from AMCL after completing action
                            self.current_yaw = self.amcl_yaw
                            self.current_action += 1
                            self.angle_covered = 0.0
                            self.current_ang_vel = 0.0
                            if self.current_action < len(segment):
                                next_action = segment[self.current_action]
                                if next_action['Steering'] == 'STRAIGHT':
                                    self.current_yaw = self.calculate_tangent_angle(action, next_action)
                    self.cmd_vel_pub.publish(cmd_vel)
                else:
                    # Update yaw from AMCL at the end of segment
                    self.current_yaw = self.amcl_yaw
                    self.current_segment += 1
                    self.current_action = 0
            else:
                cmd_vel = Twist()
                self.cmd_vel_pub.publish(cmd_vel)
            rate.sleep()
        plt.show()

if __name__ == '__main__':
    try:
        controller = MiR100Controller()
        controller.update_plot()
        controller.control_loop()
    except rospy.ROSInterruptException:
        pass